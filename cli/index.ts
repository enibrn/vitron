#!/usr/bin/env bun

import { existsSync, mkdirSync, writeFileSync } from "fs";
import { join, resolve } from "path";

/**
 * Vitron CLI - A simple command line interface
 */

// ASCII Art title
function showAsciiTitle(): void {
  console.log(`
██╗   ██╗██╗████████╗██████╗  ██████╗ ███╗   ██╗
██║   ██║██║╚══██╔══╝██╔══██╗██╔═══██╗████╗  ██║
██║   ██║██║   ██║   ██████╔╝██║   ██║██╔██╗ ██║
╚██╗ ██╔╝██║   ██║   ██╔══██╗██║   ██║██║╚██╗██║
 ╚████╔╝ ██║   ██║   ██║  ██║╚██████╔╝██║ ╚████║
  ╚═══╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
                                                  
          A powerful command line interface       
`);
}

// Command definitions
interface Command {
  name: string;
  description: string;
  handler: (args: string[]) => void;
}

// Available commands
const commands: Command[] = [
  {
    name: "help",
    description: "Show help information",
    handler: showHelp
  },
  {
    name: "version",
    description: "Show version information",
    handler: showVersion
  },
  {
    name: "hello",
    description: "Say hello with an optional name",
    handler: handleHello
  },
  {
    name: "init",
    description: "Initialize a new Vitron project structure",
    handler: handleInit
  }
];

function showHelp(): void {
  showAsciiTitle();
  console.log("Usage: bun run index.ts <command> [options]\n");
  console.log("Available commands:");
  
  commands.forEach(cmd => {
    console.log(`  ${cmd.name.padEnd(12)} ${cmd.description}`);
  });
    console.log("\nExamples:");
  console.log("  bun run index.ts help");
  console.log("  bun run index.ts hello world");
  console.log("  bun run index.ts version");
  console.log("  bun run index.ts init my-project");
}

function showVersion(): void {
  console.log("Vitron CLI v1.0.0");
}

function handleHello(args: string[]): void {
  const name = args[0] || "World";
  console.log(`Hello, ${name}!`);
}

function handleInit(args: string[]): void {
  const projectName = args[0] || "vitron-project";
  const projectPath = resolve(process.cwd(), projectName);
  
  console.log(`🚀 Initializing new Vitron project: ${projectName}`);
  
  // Check if directory already exists
  if (existsSync(projectPath)) {
    console.error(`❌ Error: Directory '${projectName}' already exists.`);
    process.exit(1);
  }
  
  try {
    // Create project directory
    mkdirSync(projectPath, { recursive: true });
    
    // Create subdirectories
    const directories = [
      "src",
      "tests", 
      "docs",
      "config"
    ];
    
    directories.forEach(dir => {
      mkdirSync(join(projectPath, dir), { recursive: true });
      console.log(`📁 Created directory: ${dir}/`);
    });
    
    // Create files
    createProjectFiles(projectPath, projectName);
    
    console.log(`\n✅ Project '${projectName}' initialized successfully!`);
    console.log(`\n📋 Next steps:`);
    console.log(`   cd ${projectName}`);
    console.log(`   bun install`);
    console.log(`   bun run dev`);
    
  } catch (error) {
    console.error(`❌ Error creating project:`, error);
    process.exit(1);
  }
}

function createProjectFiles(projectPath: string, projectName: string): void {
  // package.json
  const packageJson = {
    name: projectName,
    version: "1.0.0",
    description: `A Vitron project generated by Vitron CLI`,
    main: "src/index.ts",
    type: "module",
    scripts: {
      dev: "bun run src/index.ts",
      build: "bun build src/index.ts --outdir ./dist",
      test: "bun test",
      "test:watch": "bun test --watch"
    },
    keywords: ["vitron", "typescript", "bun"],
    author: "",
    license: "MIT",
    devDependencies: {
      "@types/bun": "latest"
    }
  };
  
  writeFileSync(
    join(projectPath, "package.json"), 
    JSON.stringify(packageJson, null, 2)
  );
  console.log(`📄 Created: package.json`);
  
  // tsconfig.json
  const tsconfig = {
    compilerOptions: {
      target: "ES2022",
      module: "ESNext",
      moduleResolution: "bundler",
      strict: true,
      esModuleInterop: true,
      skipLibCheck: true,
      forceConsistentCasingInFileNames: true,
      outDir: "./dist",
      rootDir: "./src",
      declaration: true,
      declarationMap: true,
      sourceMap: true
    },
    include: ["src/**/*"],
    exclude: ["node_modules", "dist", "tests"]
  };
  
  writeFileSync(
    join(projectPath, "tsconfig.json"),
    JSON.stringify(tsconfig, null, 2)
  );
  console.log(`📄 Created: tsconfig.json`);
  
  // src/index.ts
  const indexTs = `#!/usr/bin/env bun

/**
 * ${projectName} - Main entry point
 * Generated by Vitron CLI
 */

console.log("🎉 Welcome to ${projectName}!");
console.log("This project was created with Vitron CLI");

export function greet(name: string = "World"): string {
  return \`Hello, \${name}!\`;
}

export function main(): void {
  console.log(greet("Vitron"));
}

// Run main if this file is executed directly
if (import.meta.main) {
  main();
}
`;
  
  writeFileSync(join(projectPath, "src", "index.ts"), indexTs);
  console.log(`📄 Created: src/index.ts`);
  
  // tests/index.test.ts
  const testFile = `import { test, expect, describe } from "bun:test";
import { greet } from "../src/index";

describe("${projectName}", () => {
  test("greet should return greeting message", () => {
    expect(greet()).toBe("Hello, World!");
    expect(greet("Vitron")).toBe("Hello, Vitron!");
  });
  
  test("greet should handle empty string", () => {
    expect(greet("")).toBe("Hello, !");
  });
});
`;
  
  writeFileSync(join(projectPath, "tests", "index.test.ts"), testFile);
  console.log(`📄 Created: tests/index.test.ts`);
  
  // README.md
  const readme = `# ${projectName}

A Vitron project generated by Vitron CLI.

## Getting Started

\`\`\`bash
# Install dependencies
bun install

# Run the project
bun run dev

# Run tests
bun test

# Build the project
bun run build
\`\`\`

## Project Structure

\`\`\`
${projectName}/
├── src/
│   └── index.ts        # Main entry point
├── tests/
│   └── index.test.ts   # Test files
├── docs/               # Documentation
├── config/             # Configuration files
├── package.json        # Package configuration
├── tsconfig.json       # TypeScript configuration
└── README.md           # This file
\`\`\`

## Generated by

This project was generated using [Vitron CLI](https://github.com/your-org/vitron-cli).
`;
  
  writeFileSync(join(projectPath, "README.md"), readme);
  console.log(`📄 Created: README.md`);
  
  // .gitignore
  const gitignore = `# Dependencies
node_modules/
bun.lockb

# Build outputs
dist/
build/

# Environment variables
.env
.env.local

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Runtime data
pids/
*.pid
*.seed
*.pid.lock
`;
  
  writeFileSync(join(projectPath, ".gitignore"), gitignore);
  console.log(`📄 Created: .gitignore`);
}

function findCommand(commandName: string): Command | undefined {
  return commands.find(cmd => cmd.name === commandName);
}

function main(): void {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    showHelp();
    return;
  }
  
  const commandName = args[0];
  if (!commandName) {
    showHelp();
    return;
  }
  
  const commandArgs = args.slice(1);
  
  const command = findCommand(commandName);
  
  if (!command) {
    console.error(`Unknown command: ${commandName}`);
    console.error("Run 'bun run index.ts help' for available commands.");
    process.exit(1);
  }
  
  try {
    command.handler(commandArgs);
  } catch (error) {
    console.error(`Error executing command '${commandName}':`, error);
    process.exit(1);
  }
}

// Export functions for testing
export { commands, findCommand, showHelp, showVersion, handleHello, showAsciiTitle, handleInit, createProjectFiles };

// Run main if this file is executed directly
if (import.meta.main) {
  main();
}